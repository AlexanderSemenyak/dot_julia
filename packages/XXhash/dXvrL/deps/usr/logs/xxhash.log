`/bin/bash -c "alias ll='ls -la'

vecho() {
    if [[ \"false\" == \"true\" ]]; then
        echo \"\$@\"
    fi
}
vecho_red() {
    (vecho \"\$@\" >&2)
}

# Save bash history (and optionally echo it out as it happens)
save_history() {
    vecho_red \" ---> \$BASH_COMMAND\"
    history -s \"\$BASH_COMMAND\"
    history -a
}

# Save our environment into \`/meta/.env\`, eliminating read-only variables
# so that this file can be sourced upon entering a debug shell.
save_env() {
    set +x
    set > /meta/.env
    # Ignore read-only variables
    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do
        grep -v \"^\$l=\" /meta/.env > /meta/.env2
        mv /meta/.env2 /meta/.env
    done
    echo \"cd \$(pwd)\" >> /meta/.env
}

# We do a little sleight-of-hand here; we want to build inside of a tmpfs
# because \`srcdir\` might be mapped in through a networked filesystem, which
# totally wrecks our I/O performance.  So what we do instead is bind-mount
# \`srcdir\` to another location so that we can always get at it, copy its
# contents to a new tmpfs we mount at the location of \`srcdir\`, then when
# we exit on an error, we copy everything back over again
tmpify_srcdir() {
    vecho \"Copying srcdir to tmpfs...\"
    mkdir -p \$WORKSPACE/.true_srcdir
    mount --bind \$WORKSPACE/srcdir \$WORKSPACE/.true_srcdir
    mount -t tmpfs tmpfs \$WORKSPACE/srcdir
    rsync -rlptD \$WORKSPACE/.true_srcdir/ \$WORKSPACE/srcdir

    # We may have changed what pwd() means out from underneath ourselves
    cd \$(pwd)
}

# Copy our tmpfs version of \`srcdir\` back onto disk.
save_srcdir() {
    vecho_red \"Saving srcdir due to previous error...\"
    rsync -rlptD \$WORKSPACE/srcdir/ \$WORKSPACE/.true_srcdir --delete
}

# If /meta is mounted, then we want to save history and environment
if [[ -d /meta ]]; then
    trap save_history DEBUG
    trap \"save_env\" EXIT
    trap \"save_env; save_srcdir\" INT TERM ERR
fi

# Stop if we hit any errors.
set -e

# Swap out srcdir from underneath our feet
tmpify_srcdir

cd \$WORKSPACE/srcdir/xxHash-0.7.0
mkdir -p \${prefix}/lib
make
if [ \$target = \"x86_64-w64-mingw32\" ] || [ \$target = \"i686-w64-mingw32\" ]
then
    cp libxxhash.so \${prefix}/lib/libxxhash.so
else
    cp libxxhash.\${dlext} \${prefix}/lib/libxxhash.\${dlext}
fi

"`
/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc     -c -o xxhash.o xxhash.c
/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ar rcs libxxhash.a xxhash.o
/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc   -fPIC   xxhash.c -shared -Wl,-soname=libxxhash.so.0 -o libxxhash.so.0.7.0
ln -sf libxxhash.so.0.7.0 libxxhash.so.0
ln -sf libxxhash.so.0.7.0 libxxhash.so
/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc     -c -o xxhsum.o xxhsum.c
/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc   xxhsum.o xxhash.o   -o xxhsum
ln -sf xxhsum xxh32sum
ln -sf xxhsum xxh64sum
